[Authorize]
[Area("Admin")]
public class CategoryController : Controller
{

-------------------------------------------------------------------------------------

<li class="nav-item dropdown">
	<a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
		Admin
	</a>
	<div class="dropdown-menu" aria-labelledby="navbarDropdown">
		<a class="dropdown-item" asp-area="admin" asp-controller="Category">Category</a>
		<a class="dropdown-item" asp-area="admin" asp-controller="Product">Product</a>
	</div>
</li>

-------------------------------------------------------------------------------------

[ModelMetadataType(typeof(CategoryMetadata))]
public partial class Category : ModelBase
{
	public class CategoryMetadata
	{
		[Required(ErrorMessage = "El nombre es requerido.")]
		[Display(Name = "Nombre")]
		public string CategoryName { get; set; }

		[Required(ErrorMessage = "La descripción es requerida.")]
		[Display(Name = "Descripción")]
		public string Description { get; set; }
	}
}

-------------------------------------------------------------------------------------

<div class="form-group">
	<label asp-for="Picture" class="control-label"></label>
	<input asp-for="Picture" class="form-control" accept=".jpg" type="file" />
	<span asp-validation-for="Picture" class="text-danger"></span>
</div>
			
.............................
			
public async Task<IActionResult> Create([Bind("CategoryId,CategoryName,Description,Picture")] Category category, IFormFile picture)
{
	if (ModelState.IsValid)
	{
		if (picture != null)
		{
			using (MemoryStream ms = new MemoryStream())
			{
				picture.CopyTo(ms);
				category.Picture = ms.ToArray();
			}
		}

		_context.Add(category);
		await _context.SaveChangesAsync();
		return RedirectToAction(nameof(Index));
	}
	return View(category);
}

.............................

        public async Task<FileStreamResult> ReadImage(int id)
        {
            FileStreamResult result = null;

            var image = await _context.Categories.Where(c => c.CategoryId == id).Select(i => i.Picture).AsNoTracking().FirstOrDefaultAsync();

            if (image != null)
            {
                var stream = new MemoryStream(image);

                if (stream != null)
                {
                    result = File(stream, "image/jpg");
                }
            }

            return result;
        }
		
.............................
		
<dd class="col-sm-10">
	@*@Html.DisplayFor(model => model.Picture)*@

	@if (Model.Picture == null)
	{
		<div class="no-image"></div>
	}
	else
	{
		<img src='@Url.Action("ReadImage", new { id = Model.CategoryId })' alt="Imagen desde archivo" style="width: 80px" />
	}
</dd>		

ESTUDIANTES: Modificar el controlador de Category para permitir la 
modificación de la imagen, así como mostrar la imagen al momento de 
eliminar la categoría y que se obtiene el detalle de la misma.

-------------------------------------------------------------------------------------
ESTUDIANTES: Agregar por medio de Scaffolding los mantenimientos de datos (CRUD)
para los modelos

- Customers, Employees, Products, Region, Shippers, Suppliers, Territories, Orders

Opcional 1: Agregar a la acción de Details del controlador de Orders, que se muestre
el detalle de los productos de la orden y el monto total de la misma.

Opcional 2: Agregar que los listados obtenidos en la acción de Index de los controladores 
agregados, permitan: paginación, y ordenamiento por una columna (el usuario puede
ordenar por una columna a la vez).

Opcional 3: Que el listado obtenido en "Opcional 1" y "Opcional 2" funcione de
forma asincrónica (Partial Rendering) haciendo uso de una técnica AJAX.